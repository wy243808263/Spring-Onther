# ====================== 数据库配置信息 ======================
# 驱动类型
sqlite.driverClass = org.sqlite.JDBC
# 数据库路径
sqlite.jdbcUrl = jdbc:sqlite:///F:/eclipse/workspace/p1010.db
# 账号
sqlite.user = root
# 密码
sqlite.password = root
# ====================== 数据库连接池信息配置  ======================
# 连接池中保留的最小连接数 
sqlite.miniPoolSize = 10
# 连接池中保留的最大连接数
sqlite.maxPoolSize = 50
# 初始化时获取连接个数,取值应在minPoolSize与maxPoolSize之间
sqlite.initialPoolSize = 10
# 最大空闲时间,60秒内未使用则连接被丢弃,若为0则永不丢弃
sqlite.maxIdleTime = 7200
# 当连接池中的连接耗尽的时候sqlite一次同时获取的连接数
sqlite.acquireIncrement = 10
# 获取新连接失败后重复尝试的次数
sqlite.acquireRetryAttempts = 30
# 两次连接中间隔时间,单位毫秒
sqlite.acquireRetryDelay = 2000
# 取得连接的同时将校验连接的有效性,默认false
sqlite.testConnectionOnCheckin = true
# 跟性能消耗大请只在需要的时候设置它,如果设为true,那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等提升连接测试的性能
sqlite.testConnectionOnCheckout = false
# 连接关闭时默认将所有未提交的操作回滚
sqlite.autoCommitOnClose = true
# 检查所有连接池中的空闲连接间隔时间
sqlite.idleConnectionTestPeriod = 18000
# 当连接池用完时客户端调用getConnection()后等待获取新连接的时间,超时后将抛出SQLException,如设为0则无限期等待,单位毫秒
sqlite.checkoutTimeout = 5000
# 缓慢的JDBC操作通过帮助进程完成,扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行
sqlite.numHelperThreads = 5

#===================================== ACCESS ======================================
# ====================== 数据库配置信息 ======================
# 驱动类型
access.driverClass = sun.jdbc.odbc.JdbcOdbcDriver
# 数据库路径
access.jdbcUrl = jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=E://sms.mdb
# 账号
access.user = root
# 密码
access.password = root
# ====================== 数据库连接池信息配置  ======================
# 连接池中保留的最小连接数 
access.miniPoolSize = 10
# 连接池中保留的最大连接数
access.maxPoolSize = 50
# 初始化时获取连接个数,取值应在minPoolSize与maxPoolSize之间
access.initialPoolSize = 10
# 最大空闲时间,60秒内未使用则连接被丢弃,若为0则永不丢弃
access.maxIdleTime = 7200
# 当连接池中的连接耗尽的时候access一次同时获取的连接数
access.acquireIncrement = 10
# 获取新连接失败后重复尝试的次数
access.acquireRetryAttempts = 30
# 两次连接中间隔时间,单位毫秒
access.acquireRetryDelay = 2000
# 取得连接的同时将校验连接的有效性,默认false
access.testConnectionOnCheckin = true
# 跟性能消耗大请只在需要的时候设置它,如果设为true,那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等提升连接测试的性能
access.testConnectionOnCheckout = false
# 连接关闭时默认将所有未提交的操作回滚
access.autoCommitOnClose = true
# 检查所有连接池中的空闲连接间隔时间
access.idleConnectionTestPeriod = 18000
# 当连接池用完时客户端调用getConnection()后等待获取新连接的时间,超时后将抛出SQLException,如设为0则无限期等待,单位毫秒
access.checkoutTimeout = 5000
# 缓慢的JDBC操作通过帮助进程完成,扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行
access.numHelperThreads = 5