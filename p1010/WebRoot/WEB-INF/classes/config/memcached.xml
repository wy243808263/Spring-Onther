<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ehcache="http://www.springframework.org/schema/ehcache"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/ehcache  http://www.springframework.org/schema/cache/springmodules-ehcache.xsd">

	<!-- memCached for java客户端 -->
	<bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>memCachedPool</value>
		</constructor-arg>
	</bean>

	<!-- memCached连接池 -->
	<bean id="memCachedPool" class="com.danga.MemCached.SockIOPool"
		factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>memCachedPool</value>
		</constructor-arg>
		<property name="servers">
			<list>
				<value>${memcached.server1}</value>
			</list>
		</property>
		<property name="weights">
			<list>
				<value>${memcached.weight1}</value>
			</list>
		</property>
		<property name="initConn">
			<value>${memcached.initConn}</value>
		</property>
		<property name="minConn">
			<value>${memcached.minConn}</value>
		</property>
		<property name="maxConn">
			<value>${memcached.maxConn}</value>
		</property>
		<property name="maintSleep">
			<value>${memcached.maintSleep}</value>
		</property>
		<property name="nagle">
			<value>${memcached.nagle}</value>
		</property>
		<property name="socketTO">
			<value>${memcached.socketTO}</value>
		</property>
	</bean>

	<!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
	<bean id="cacheMethodInterceptor" class="com.shadow.extras.cache.CacheMethodInterceptor">
		<property name="memCachedClient" ref="memCachedClient" />
		<property name="expire" value="4200000" />
	</bean>

	<!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
	<bean class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<!-- 配置缓存切面 -->
		<property name="advice" ref="cacheMethodInterceptor" />
		<!--
			配置哪些方法参与缓存策略 .表示符合任何单一字元 ### +表示符合前一个字元一次或多次 ### *表示符合前一个字元零次或多次 ###
			\Escape任何Regular expression使用到的符号
		-->
		<!-- .*表示前面的前缀(包括包名) 表示print方法-->
		<property name="patterns">
			<list>
				<value>
					<!-- com.shadow.mvc.service\..Service.*\.find.*   -->
					com.shadow.mvc.main.service.impl.BrandService.*\.find.*
				</value>
			</list>
		</property>
	</bean>

	<aop:config></aop:config>

	<!-- 配置一个缓存拦截器对象，处理具体的同步缓存业务 -->
	<bean id="cacheMethodAfterAdvice" class="com.shadow.extras.cache.CacheMethodAfterAdvice">
		<property name="memCachedClient" ref="memCachedClient" />
	</bean>
	<aop:config>
		<aop:aspect id="methodCachePointCutAdviceAspect" ref="cacheMethodAfterAdvice">
			<aop:after method="afterReturning"
				pointcut="execution(* com.shadow.mvc.main.service.*Service.modify*(..))" />
			<aop:after method="afterReturning"
				pointcut="execution(* com.shadow.mvc.main.service.*Service.save*(..))" />
			<aop:after method="afterReturning"
				pointcut="execution(* com.shadow.mvc.main.service.*Service.remove*(..))" />
		</aop:aspect>
	</aop:config>

</beans>
